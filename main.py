import asyncio
import logging
import os
import json
import tempfile
from datetime import datetime, timedelta
from typing import Dict, Any

from aiogram import Bot, Dispatcher, Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
)
from aiogram.utils.markdown import bold, italic, underline

# Configure logging
logging.basicConfig(level=logging.INFO)

# Bot token to be replaced with your actual token
API_TOKEN = '7418768945:AAEURvaywFpF8M8eMsNdC1NBaCIGl0YICQI'

# Admin IDs
ADMIN_IDS = [804644988,1694080645,6959774479]  # Replace with your actual admin IDs

# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
admin_router = Router()
broadcast_router = Router()

# Dictionary to track users who need a reminder
users_to_remind: Dict[int, datetime] = {}

# Links
REVIEWS_LINK = "https://t.me/+o2dYUSbxIhE4MDMy"

# Images (replace with actual URLs)
WELCOME_IMAGE_URL = "https://postimg.cc/Kk2NjS3Y"
PAYMENT_SUCCESS_IMAGE_URL = "https://postimg.cc/GH5xYsTV"

# Flag for broadcast mode
broadcast_mode = False


# Utility functions
def is_admin(user_id: int) -> bool:
    """Check if user is an admin."""
    return user_id in ADMIN_IDS


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """
    Handler for the /start command.
    Sends welcome message with image and description.
    """
    # Reset state when starting
    await state.clear()

    # Send first message with image and description
    welcome_text = (
        "–ù–∞ —ç—Ç–æ–π —É–ª–∏—Ü–µ –≤—Å—ë –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —É–ª—ã–±–∫–∏)\n\n"
        "–ò —Å –¥–µ—Å–µ—Ä—Ç–∞... üç∞üßÅ\n\n"
        "–õ–∏–º–æ–Ω–Ω—ã–π –∫–µ–∫—Å, —è–≥–æ–¥–Ω—ã–π –ø–∏—Ä–æ–≥ –∏–ª–∏ –±–∞–Ω–∞–Ω–æ–≤–∞—è –∑–∞–ø–µ–∫–∞–Ω–∫–∞ ‚Äî –∫–∞–∂–¥–∞—è —Å–ª–∞–¥–æ—Å—Ç—å —Ö—Ä–∞–Ω–∏–ª–∞ —Å–≤–æ—é —Ç–∞–π–Ω—É\n\n"
        "–ö–∞–∫ –∏ –∫–∞–∂–¥–∞—è —Ö–æ–∑—è–π–∫–∞...\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª—É–± {bold('¬´–æ—Ç–ß–ê–ô–∞–Ω–Ω—ã–µ –¥–æ–º–æ—Ö–æ–∑—è–π–∫–∏¬ª')}\n\n"
        "–ó–¥–µ—Å—å –º—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–µ—á—ë–º. –ú—ã —Å–æ–∑–¥–∞—ë–º –ø–æ–≤–æ–¥ –∑–∞–≥–ª—è–Ω—É—Ç—å –∫ —Å–æ—Å–µ–¥–∫–µ. –û–±—Å—É–¥–∏—Ç—å, –ø–æ—á–µ–º—É —Ç–æ—Ä—Ç –Ω–µ –ø–æ–¥–Ω—è–ª—Å—è, –∏ –∫—Ç–æ –∂–µ –≤—Å—ë-—Ç–∞–∫–∏ –≤–∑—è–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫–ª–µ—Ä\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª:\n\n"
        "490‚ÇΩ –∑–∞ 1 –º–µ—Å—è—Ü\n\n"
        f"–ò –ø–æ—Å–ª–µ - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –∫–∞–Ω–∞–ª—É –ø–æ –∫–Ω–æ–ø–∫–µ {bold('–û–ü–õ–ê–¢–ò–¢–¨ –î–û–°–¢–£–ü ‚úÖ')}"
    )

    await bot.send_photo(
        message.chat.id,
        photo=WELCOME_IMAGE_URL,
        caption=welcome_text,
    )

    # Schedule the second message after 3 seconds
    await asyncio.sleep(3)

    # Send second message with buttons
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø ‚úÖ", callback_data="pay_access")
        ]
    ])

    second_message = await bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:",
        reply_markup=keyboard
    )

    # Save message_id for later deletion if needed
    await state.update_data(menu_message_id=second_message.message_id)

    # Add user to reminder list
    user_id = message.from_user.id
    users_to_remind[user_id] = datetime.now() + timedelta(days=1)


@router.callback_query(F.data == "pay_access")
async def process_payment_button(callback: CallbackQuery, state: FSMContext):
    """
    Handler for the "–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø" button.
    Deletes the old message and sends a new one with tariffs.
    """
    # Get the message ID to delete
    data = await state.get_data()
    message_id_to_delete = data.get("menu_message_id")

    if message_id_to_delete:
        await bot.delete_message(callback.message.chat.id, message_id_to_delete)

    # Send new message with tariffs
    tariffs_text = (
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
        "¬∑ 1 –º–µ—Å—è—Ü 490‚ÇΩ\n\n"
        f"{italic('–ü—Ä–∏ –æ–ø–ª–∞—Ç–µ –∫–∞—Ä—Ç–æ–π –Ω–∞ –º–µ—Å—è—Ü, –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Å–ø–∏—Å–∞–Ω–∏–µ')}\n\n"        "–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø üëá"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø üî•", url="https://t.me/tribute/app?startapp=ssXR")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ üîô", callback_data="back_to_menu")]
    ])

    new_message = await bot.send_message(
        callback.message.chat.id,
        tariffs_text,
        reply_markup=keyboard
    )

    # Save new message ID
    await state.update_data(tariffs_message_id=new_message.message_id)

    # Answer callback to remove loading state
    await callback.answer()


@router.callback_query(F.data == "process_payment")
async def process_successful_payment(callback: CallbackQuery, state: FSMContext):
    """
    Handler for successful payment simulation.
    Sends welcome message to the channel.
    """
    # Remove user from reminder list
    user_id = callback.from_user.id
    if user_id in users_to_remind:
        del users_to_remind[user_id]

    # Welcome message after payment
    welcome_text = (
        "–¢—ã —Ç–µ–ø–µ—Ä—å –æ–¥–Ω–∞ –∏–∑ –Ω–∞—Å.\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∑–∞–∫—Ä—ã—Ç—ã–π –∫–ª—É–±\n"
        "¬´–æ—Ç–ß–ê–ô–∞–Ω–Ω—ã–µ –¥–æ–º–æ—Ö–æ–∑—è–µ–∫¬ªü•ß\n"
        "–ö–ª—É–±, –≥–¥–µ –∑–Ω–∞—é—Ç: –∑–∞ –∏–¥–µ–∞–ª—å–Ω—ã–º–∏ —Å–∫–∞—Ç–µ—Ä—Ç—è–º–∏ –∏ –∞—Ä–æ–º–∞—Ç–æ–º –≤—ã–ø–µ—á–∫–∏ —Å–∫—Ä—ã–≤–∞—é—Ç—Å—è –Ω–∞—Å—Ç–æ—è—â–∏–µ –∏—Å—Ç–æ—Ä–∏–∏‚Ä¶ü§´"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í–æ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª ‚û°Ô∏è", callback_data="enter_channel")]
    ])

    await bot.send_photo(
        callback.message.chat.id,
        photo=PAYMENT_SUCCESS_IMAGE_URL,
        caption=welcome_text,
        reply_markup=keyboard
    )

    # Answer callback to remove loading state
    await callback.answer()


@router.callback_query(F.data == "enter_channel")
async def enter_channel(callback: CallbackQuery):
    """
    Handler for "–í–æ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª" button.
    Does nothing as specified.
    """
    await callback.answer()


# –£–¥–∞–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä–∞ –æ—Ñ–µ—Ä—Ç—ã, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    """
    Handler for "–ù–∞–∑–∞–¥" button.
    Returns to the main menu.
    """
    # Get the message ID to delete
    data = await state.get_data()
    message_id_to_delete = data.get("tariffs_message_id")

    if message_id_to_delete:
        await bot.delete_message(callback.message.chat.id, message_id_to_delete)

    # Recreate the main menu
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø ‚úÖ", callback_data="pay_access")
        ]
    ])

    new_message = await bot.send_message(
        callback.message.chat.id,
        "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:",
        reply_markup=keyboard
    )

    # Update the stored message ID
    await state.update_data(menu_message_id=new_message.message_id)

    # Answer callback to remove loading state
    await callback.answer()


async def send_reminders():
    """
    Task to send reminders to users who didn't continue interacting with the bot.
    """
    while True:
        current_time = datetime.now()
        users_to_remove = []

        for user_id, reminder_time in users_to_remind.items():
            if current_time >= reminder_time:
                # Send reminder
                reminder_text = (
                    "–ò–Ω–æ–≥–¥–∞ –¥–æ–º–æ—Ö–æ–∑—è–π–∫–∏ —Å–æ–≤–µ—Ä—à–∞—é—Ç —Å—Ç—Ä–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—É–ø–∫–∏ ü§î\n"
                    "–û–Ω–∏ –Ω–∞–∂–∏–º–∞—é—Ç \"–°—Ç–∞—Ä—Ç\"‚Ä¶ –∏ –∏—Å—á–µ–∑–∞—é—Ç\n"
                    "–ú–æ–∂–µ—Ç –±—ã—Ç—å, –∏—Ö –æ—Ç–≤–ª—ë–∫ –∫–∞–ø—Ä–∏–∑–Ω—ã–π —Ä–µ–±—ë–Ω–æ–∫. –ò–ª–∏ –¥—É—Ö–æ–≤–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –≤–¥—Ä—É–≥ —Ä–µ—à–∏–ª–∞ —É—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–∂–∞—Ä\n"
                    "–ê –º–æ–∂–µ—Ç‚Ä¶\n"
                    "–æ–Ω–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –≥–æ—Ç–æ–≤—ã –∫ —Å–ª–∞–¥–∫–æ–º—É, –∫–∞–∫ –∂–∏–∑–Ω—å, –∏—Å–∫—É—à–µ–Ω–∏—é?\n"
                    "–í –º–æ–µ–º –∑–∞–∫—Ä—ã—Ç–æ–º –∫–ª—É–±–µ –≤–∞—Å –∂–¥—É—Ç –¥–µ—Å–µ—Ä—Ç—ã, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —É–π–¥—ë—à—å –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫\n"
                    "–ü–∏—Ä–æ–≥–∏, –ø–µ—á–µ–Ω—å–µ, –∫–µ–∫—Å—ã ‚Äî –≤—Å—ë —Ç–æ, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –¥–æ–º –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É —É—é—Ç–Ω—ã–º. –ò –æ–ø–∞—Å–Ω–æ –≤–∫—É—Å–Ω—ã–º üî•\n"
                    "–¢–∞–∫ —á—Ç–æ, –¥–æ—Ä–æ–≥–∞—è‚Ä¶ –µ—Å–ª–∏ —Ç—ã –≤—Å—ë –µ—â—ë –≥–¥–µ-—Ç–æ —Ä—è–¥–æ–º ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç—å\n"
                    "–ú—ã —É–∂–µ –Ω–∞–ª–∏–ª–∏ –¥–ª—è —Ç–µ–±—è —á–∞—à–µ—á–∫—É –≥–æ—Ä—è—á–µ–≥–æ —à–æ–∫–æ–ª–∞–¥–∞ ‚òïÔ∏è"
                )

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø ‚úÖ", url="https://t.me/tribute/app?startapp=ssXR")
                    ]
                ])

                try:
                    await bot.send_message(user_id, reminder_text, reply_markup=keyboard)
                except Exception as e:
                    logging.error(f"Failed to send reminder to user {user_id}: {e}")

                # Mark user for removal from reminder list
                users_to_remove.append(user_id)

        # Remove processed users
        for user_id in users_to_remove:
            users_to_remind.pop(user_id, None)

        # Check every hour
        await asyncio.sleep(3600)

# Admin command handlers
@admin_router.message(Command(commands="admin"))
async def cmd_admin(message: Message):
    """Admin panel command handler."""
    if not is_admin(message.from_user.id):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    admin_text = (
        "üìä <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="create_broadcast")]
    ])

    await message.answer(
        admin_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@broadcast_router.callback_query(F.data == "create_broadcast")
async def callback_create_broadcast(callback: CallbackQuery):
    """Start broadcast mode."""
    if not is_admin(callback.from_user.id):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    global broadcast_mode
    broadcast_mode = True

    await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
        "<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:</b> \n"
        "- <b>–¢–µ–∫—Å—Ç</b> (–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)\n"
        "- <b>–§–æ—Ç–æ</b> (–° –æ–ø–∏—Å–∞–Ω–∏–µ–º, –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)\n"
        "- <b>–í–∏–¥–µ–æ</b> (–° –æ–ø–∏—Å–∞–Ω–∏–µ–º, –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)\n"
        "- <b>–î–æ–∫—É–º–µ–Ω—Ç</b> (–° –æ–ø–∏—Å–∞–Ω–∏–µ–º, –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)\n"
        "- <b>–ê—É–¥–∏–æ</b> (–° –æ–ø–∏—Å–∞–Ω–∏–µ–º, –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)\n"
        "- <b>–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b> (–° –æ–ø–∏—Å–∞–Ω–∏–µ–º, –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)\n"
        "- <b>–í–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ</b>",
        parse_mode="HTML"
    )

    await callback.answer()


@broadcast_router.message()
async def handle_broadcast(message: Message):
    """Handle broadcast messages."""
    global broadcast_mode

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏
    if not is_admin(message.from_user.id) or not broadcast_mode:
        return

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–±–æ—Ä ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –±–æ—Ç–∞
    # –ù–æ —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω—É–∂–Ω–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ

    # –¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await message.answer(
        "–§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
        "–°–µ–π—á–∞—Å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è."
    )

    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏
    broadcast_mode = False


async def main():
    """Main function to start the bot."""
    dp.include_router(router)
    dp.include_router(admin_router)
    dp.include_router(broadcast_router)

    # Start the reminder task
    asyncio.create_task(send_reminders())

    # Start polling
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

